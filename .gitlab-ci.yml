# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script: 
     - apt update && apt -y install build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev
     - git clone https://github.com/Itseez/opencv.git
     - cd opencv
     - mkdir build
     - cd build
     - cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..
     - make
     - make install
  script: 
    - mkdir build
    - cd build
    - cmake ..
    - make OrangeBall
 #artifacts:
   # paths:
     # - mybinary
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  before_script:
    - apt-get install -y libgtest-dev cmake build-essential
    - cd /usr/src/gtest
    - cmake CMakeLists.txt
    - make
    - cp *.a /usr/lib
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make RunUnitTests
